# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if(head == None or k ==1):
            return head
        before = head
        tail = head
        while(tail != None):
            for i in range(k-1):
                if(tail == None):
                    break
                tail = tail.next
            if(tail == None):
                break
            if(before == head):
                l1 = before
                l2 = l1
                temp = l2.next
                for i in range(k-1):
                    l2.next = temp.next
                    temp.next = l1
                    l1 = temp
                    temp = l2.next
                before = l2
                head = l1
            else:
                l1 = before.next
                l2 = l1
                temp = l2.next
                for i in range(k-1):
                    l2.next = temp.next
                    before.next = temp
                    temp.next = l1
                    l1 = temp
                    temp = l2.next
                before = l2
            tail = l2.next
        return head
