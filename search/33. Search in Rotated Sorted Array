#在有序子数组中查找
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        length = len(nums)
        if(length == 0):
            return -1
        if(length == 1):
            return 0 if nums[0] == target else -1
        for i in range(1, length):
            if(nums[i-1] > nums[i]):
                break
        if(i == length - 1 and nums[i-1] <= nums[i]):
            left = 0
            right = length - 1
        else:
            if(nums[0] > target):
                left = i
                right = length - 1
            else:
                left = 0
                right = i - 1
        print(left, right)
        while(left < right):
            mid = int((left + right)/2)
            if(nums[mid] == target):
                return mid
            elif(nums[mid] < target):
                left = mid + 1
            else:
                right = mid - 1
        print(left, nums[left], target)
        if(nums[left] == target):
            return left
        else:
            return -1
            
#原地二分查找，判断升降序
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        left = 0
        right = len(nums) - 1
        if(right == -1):
            return -1
        while(left < right):
            mid = int((left + right)/2)
            if(nums[mid] == target):
                return mid
            if(nums[mid] >= nums[left]):
                if(nums[mid] > target and nums[left] <= target):
                    right = mid - 1
                else:
                    left = mid + 1
            if(nums[mid] <= nums[right]):
                if(nums[mid] < target and nums[right] >= target):
                    left = mid + 1
                else:
                    right = mid - 1
        print(left, right)
        if(nums[left] == target):
            return left
        else:
            return -1
