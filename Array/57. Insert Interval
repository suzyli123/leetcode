# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution(object):
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[Interval]
        :type newInterval: Interval
        :rtype: List[Interval]
        """
        intervals.sort(key = lambda x:x.start)
        length = len(intervals)
        if(length < 1):
            return [newInterval]
        ans = []
        for i in range(length):
            print('new', newInterval.start, newInterval.end, 'compare', intervals[i].start, intervals[i].end)
            if(newInterval.start >= intervals[i].start and newInterval.end <= intervals[i].end):
                print('type 1')
                newInterval.start = intervals[i].start
                newInterval.end = intervals[i].end
            elif(newInterval.start <= intervals[i].start and newInterval.end >= intervals[i].end):
                print('type 2')
                continue
            elif(newInterval.end >= intervals[i].start and newInterval.end <= intervals[i].end):
                print('type 3')
                newInterval.start = min(newInterval.start, intervals[i].start)
                newInterval.end = intervals[i].end
            elif(newInterval.start >= intervals[i].start and newInterval.start <= intervals[i].end):
                print('type 4')
                newInterval.start = intervals[i].start
                newInterval.end = max(newInterval.end, intervals[i].end)
            else:
                print('type 5')
                ans.append(intervals[i])
        ans.append(newInterval)
        ans.sort(key = lambda x:x.start)
        return ans
                
            
