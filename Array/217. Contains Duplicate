class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        map<int, int>number;
        map<int, int>::iterator it;
        int len = nums.size();
        for(int i=0; i<len; i++){
            it = number.find(nums[i]);
            if(it != number.end()){
                return true;
            }
            else
                number[nums[i]] = 0;
        }
        return false;
    }
};

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int len = nums.size();
        for(int i=1; i<len; i++){
            if(nums[i] == nums[i-1])
                return true;
        }
        return false;
    }
};



class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        return nums.size() > set<int>(nums.begin(), nums.end()).size();
    }
};

