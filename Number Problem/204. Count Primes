solutions1
首先，我试图在遍历的过程中保存之前所有的质数，然后对于对于一个自然数 N：

只需用小于 N 的素数去除就可以了。
而且，不必用从 2 到 N一1 的所有质数去除，只需用小于等于根号N的所有素数去除就可以了。

solutions2:
没办法了我就去Google了一下，于是知道了厄拉多塞筛法：

西元前250年，希腊数学家厄拉多塞(Eeatosthese)想到了一个非常美妙的质数筛法，减少了逐一检查每个数的的步骤，可以比较简单的从一大堆数字之中，筛选出质数来，这方法被称作厄拉多塞筛法(Sieve of Eeatosthese)。

具体操作：先将 2~n 的各个数放入表中，然后在2的上面画一个圆圈，然后划去2的其他倍数；第一个既未画圈又没有被划去的数是3，将它画圈，再划去3的其他倍数；现在既未画圈又没有被划去的第一个数 是5，将它画圈，并划去5的其他倍数……依次类推，一直到所有小于或等于 n 的各数都画了圈或划去为止。这时，表中画了圈的以及未划去的那些数正好就是小于 n 的素数。
其实，当你要画圈的素数的平方大于 n 时，那么后面没有划去的数都是素数，就不用继续判了。

import math
class Solution(object):
    def countPrimes(self, n):
        """
        :type n: int
        :rtype: int
        """
        if(n <= 2):
            return 0
        nums = [True]*(n)
        nums[0], nums[1] = False, False
        for i in range(4,n,2):
            nums[i] = False
        for i in range(3,n):
            if(nums[i]):
                j = 2
                while(j*i < n):
                    nums[i*j] = False
                    j += 1
        count = 0
        for i in range(n):
            if(nums[i]):
                count += 1
        return count
